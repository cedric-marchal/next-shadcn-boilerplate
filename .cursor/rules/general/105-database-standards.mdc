---
description: Database standards for PostgreSQL and Prisma
globs: *.sql,*.ts,*.tsx
alwaysApply: false
---
# Database Standards

## Context

* We use PostgreSQL as our database
* Prisma is our ORM for PostgreSQL
* Migrations should be written in PostgreSQL

## PostgreSQL Standards

You must always write PostgreSQL code when you are in `.sql` files.

PostgreSQL uses quotes for tables and column names. Here is a valid example:

```sql
INSERT INTO "OrganizationPlan" ("id", "name", "maximumMembers", "createdAt", "updatedAt")
VALUES 
  ('FREE', 'Free Plan', 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP),
  ('PRO', 'Pro Plan', 10, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
ON CONFLICT ("id") DO NOTHING;
```

- Use valid PostgreSQL syntax with quotes for table and column names.

## Prisma Standards

### Usage with Small Queries

For small queries only used in one place, you can get data from a server component like this:

```tsx
export default async function EditProfilePage() {
  const user = await requiredAuth();

  const hasPassword = await prisma.user.count({
    where: {
      id: user.id,
      passwordHash: {
        not: null,
      },
    },
  });

  return (
    // ...
  );
}
```

### Usage with Big and Reusable Queries

When dealing with large queries that involve frontend logic AND when the return type is used in multiple components, always create the query under the `/lib/prisma` folder.

Example with an organization query:

```tsx
import type { OrganizationMembershipRole, Prisma, User } from "@prisma/client";
import { prisma } from "@/lib/prisma";

// Can be just an object if no params needed
// Can be also "Include" Query
export const OrgSelectQuery = (userId: string) =>
  ({
    id: true,
    slug: true,
    name: true,
    plan: true,
    email: true,
    image: true,
    stripeCustomerId: true,
    timezone: true,
    members: {
      where: {
        userId: userId,
      },
      select: {
        roles: true,
      },
    },
  }) satisfies Prisma.OrganizationSelect;

export const getOrganization = async (
  organizationSlug: string,
  user: NonNullable<User>,
  roles?: OrganizationMembershipRole[],
) => {
  const org = await prisma.organization.findFirst({
    where: {
      OR: [{ slug: organizationSlug }, { id: organizationSlug }],
      members: {
        some: {
          userId: user.id,
          roles: roles
            ? {
                hasSome: [...roles, "OWNER"],
              }
            : undefined,
        },
      },
    },
    select: OrgSelectQuery(user.id),
  });

  return org;
};

// IMPORTANT: Export the return type of the query so we can use it later
export type OrganizationViewType = NonNullable<
  Prisma.PromiseReturnType<typeof getOrganization>
>;
```

## Rules

* When using a type in props parameters, always consider using the query return type to automatically update when the query changes (like `OrganizationViewType` in the example)
* Always use Prisma's type system to ensure type safety throughout your application
* Keep migrations clean and use PostgreSQL syntax for all SQL files
* Structure complex queries in reusable functions within the `/lib/prisma` directory
* Export types for query results to maintain consistency across components 