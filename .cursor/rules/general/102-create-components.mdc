---
description: Standards for component and page creation
globs: *.tsx
alwaysApply: false
---
---
description: EXPLAIN how to create a component
globs: *.tsx
---
### Context

* Creating a component must ALWAYS follow these rules.

### Rules

- Always use `export` without default.
- Always use a props object as the first argument of your component, and add the type directly in the object.
- Always type components using the type keyword â€” never use interface, except in rare edge cases (e.g., complex extension or inheritance).
- Only one component per file â€” never declare more than one component in the same file.
- If Cursor creates a folder for components inside the app directory, it must be named `_components`.
- All page-specific components must be placed inside a `_components` folder within the corresponding page directory in app/.
- The `components/` directory (outside of app/) is reserved for global, reusable components shared across the app.
- All component files must be named using kebab-case (e.g. my-component.tsx) instead of PascalCase (e.g. MyComponent.tsx).
- Always use the cn utility function from `@/lib/utils.ts` for combining conditional Tailwind CSS classes instead of string concatenation or template literals.
- Always create responsive components, optimized primarily for desktop, tablet, and mobile screens.
- Components and subcomponents must be built to be as SEO-friendly as possible to support search engine indexing.
- All components must be server components by default. Use "use client" only when strictly necessary for client-side interactivity.
- Always use `import type` when importing types. Never import types without explicitly marking them as types to optimize bundle size and improve code clarity.

### Examples

With 2 or fewer props:

```tsx
export const MyComponent = ({ prop1, prop2 }: { prop1: string; prop2: number }) => {
  return <div>{prop1}</div>;
}
```

With more than 2 props:

```tsx
type MyComponentProps = { 
  prop1: string; 
  prop2: number;
  prop3: number;
}

export const MyComponent = ({ prop1, prop2, prop3 }: MyComponentProps) => {
  return <div>{prop1}</div>;
}
``` 

Conditional Tailwind CSS classes:
```tsx
import { cn } from "@/lib/utils";

type ButtonProps = {
  variant?: "primary" | "secondary" | "danger";
  size?: "sm" | "md" | "lg";
  isFullWidth?: boolean;
  isDisabled?: boolean;
  className?: string;
  children: React.ReactNode;
};

export const Button = ({ 
  variant = "primary", 
  size = "md", 
  isFullWidth = false,
  isDisabled = false,
  className,
  children
}: ButtonProps) => {
  return (
    <button
      type="button"
      disabled={isDisabled}
      className={cn("rounded-md font-medium transition-colors focus:outline-none focus:ring-2",
        variant === "primary" && "bg-blue-600 text-white hover:bg-blue-700",
        variant === "secondary" && "bg-gray-200 text-gray-800 hover:bg-gray-300",
        variant === "danger" && "bg-red-600 text-white hover:bg-red-700",
        size === "sm" && "px-3 py-1.5 text-sm",
        size === "md" && "px-4 py-2 text-base",
        size === "lg" && "px-6 py-3 text-lg",
        isFullWidth && "w-full",
        isDisabled && "opacity-50 cursor-not-allowed",
        className
      )}
    >
      {children}
    </button>
  );
};
```

Importing types correctly:
```ts
import type { ReactNode } from "react";

type CardProps = {
  title: string;
  content: string;
  children?: ReactNode;
};

export const Card = ({ title, content, children }: CardProps) => {
  return (
    <div className="rounded-md border p-4 shadow-sm">
      <h2 className="text-xl font-bold">{title}</h2>
      <p className="mt-2 text-gray-600">{content}</p>
      {children && <div className="mt-4">{children}</div>}
    </div>
  );
};
```