---
description: 
globs: 
alwaysApply: true
---
---
description: 
globs: 
alwaysApply: true
---
- Write concise, technical TypeScript code using functional and declarative programming patterns.
- Avoid classes; prefer iteration and modularization over code duplication.
- Use descriptive variable names with auxiliary verbs (e.g., `isLoading`, `hasError`).
- Structure files into: exported component, subcomponents, helpers, static content, and types.
- When using a native HTML <button>, always explicitly set the type attribute. If no type is defined, default to type="button" to avoid unintentional form submissions.
- The fewer lines of code, the better
- Proceed like a Senior Developer 

## app-structure

- Folder app/ – Full structure:
app/
├── not-found.tsx
├── layout.tsx
├── providers.tsx
├── globals.css
├── favicon.ico
├── robots.ts
├── sitemap.ts
├── error.tsx
├── global-error.tsx
├── (public)/
│   ├── layout.tsx
│   ├── page.tsx
│   ├── _components/                   # Global public components
│   │   ├── header.tsx                 # <Header /> component
│   │   └── footer.tsx                 # <Footer /> component
│   └── (routes)/
│       ├── blog/
│       │   ├── page.tsx
│       │   ├── loading.tsx
│       │   ├── error.tsx
│       │   ├── _components/
│       │   └── (routes)/
│       │       └── [slug]/
│       │           ├── page.tsx
│       │           ├── loading.tsx
│       │           ├── error.tsx
│       │           └── _components/
│       ├── sign-in/
│       │   ├── page.tsx
│       │   └── _components/
│       ├── sign-up/
│       │   ├── page.tsx
│       │   └── _components/
│       └── [other-routes]/
│           ├── page.tsx
│           └── _components/
├── (protected)/
│   ├── layout.tsx
│   └── (routes)/
│       ├── dashboard/
│       │   ├── page.tsx
│       │   └── _components/
│       ├── admin/
│       │   ├── page.tsx
│       │   └── _components/
│       └── [other-protected-routes]/
│           ├── page.tsx
│           └── _components/
├── api/
│   └── [...endpoints]

- Every page lives in its own folder and includes:
- page.tsx — the route’s entry component
- _components/ — colocated components specific to that route
- If a page serves as the base path for other pages (e.g. /blog and /blog/[slug]), the sub-pages must be grouped in a (routes)/ folder under it.
- All route-specific components must be colocated under _components/.
- Use layout.tsx where persistent UI is needed (navigation, sidebar, etc.).
- (public)/ holds all routes accessible without authentication.
- (protected)/ holds all routes requiring authentication, with optional RBAC (e.g., for admin).
- The global fallback not-found.tsx must be placed at the root of the app/ directory.

## syntax-and-formatting

- Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
- Write declarative JSX.

## typescript-usage

- Use TypeScript for all code; prefer types over interfaces.
- Always use `import type` when importing types to separate types from runtime code and improve bundle optimization.
- Avoid enums; use maps instead.
- Use functional components with TypeScript types.

## ui-and-styling

- Use Shadcn UI, Radix, and Tailwind for components and styling.
- Implement responsive design with Tailwind CSS using a mobile-first approach.

## performance-optimization

- Minimize `use client`, `useEffect`, and `setState`; favor React Server Components (RSC).
- Wrap client components in `Suspense` with fallback.
- Use dynamic loading for non-critical components.
- Optimize images: use WebP format, include size data, and implement lazy loading.

## database-querying-and-data-model-creation

- Use Prisma SDK to query the database.
- For data models, read the `.prisma` files.

## key-conventions

- Use 'nuqs' for URL search parameter state management.
- Optimize Web Vitals (LCP, CLS, FID).
- Limit 'use client': Favor server components and Next.js SSR for data fetching or state management.
- Use 'use client' only for Web API access in small components.

## conditional-logic
- ALWAYS use early-return patterns for conditional logic to improve readability
- Avoid nested conditionals and ternary operators when multiple conditions are involved
- Return early for error cases, loading states, or validation checks

Example:
```tsx
// ✅ Good: Early returns
const processUser = (user) => {
  if (!user) {
    return null;
  }

  if (user.isLocked) {
    return { error: 'User account is locked' };
  }

  if (!user.isVerified) {
    return { error: 'Please verify your account' };
  }

  return {
    name: user.name,
    data: user.data
  };
}

// ❌ Bad: Nested conditionals
const processUser = (user) => {
  if (user) {
    if (!user.isLocked) {
      if (user.isVerified) {
        return {
          name: user.name,
          data: user.data
        };
      } else {
        return { error: 'Please verify your account' };
      }
    } else {
      return { error: 'User account is locked' };
    }
  } else {
    return null;
  }
}
```

## output

- Always write code in English
- Always write UI in English

## terminal

- ALWAYS use `pnpm`


